}
# Test with M = 10, N = 100 and alpha = 5%
MTweedieTests(10, 100, 0.05)
# Create df
df <- tibble(N = c(10, 100, 1000, 5000), M = 100,
share_reject = NA)
# Loop through each row of the df and fill in the share_reject column
for (i in 1:nrow(df)) {
N <- df$N[i]
M <- df$M[i]
# Call the MTeedie function to calc the share of rejects
share_reject <- MTweedieTests(M, N, alpha = 0.05)
# Assign the value to each row of the df
df$share_reject[i] <- share_reject
}
ggplot(df, aes(x = N, y = share_reject)) +
geom_line() +
geom_point() +
labs(
x = "Sample Size (N)",
y = "Percentage of Rejected Tests",
title = "Validity of t-test on Distribution"
)
# Tweedie-distributed data
TweedieData <- function(N, mu, phi, power) {
rtweedie(N, mu = mu, phi = phi, power = power)
}
# Normally distributed data
NormalData <- function(N, mu, sigma) {
rnorm(N, mean = mu, sd = sigma)
}
# Function that performs a t-test and returns the p-value
tTest <- function(data, mu) {
result <- t.test(data, mu = mu)
return(result$p.value)
}
# Modify the MTweedie function
TweedieVsNormalTest <- function(M, N, alpha, distribution = "tweedie") {
num_successful_tests <- 0
for (i in 1:M) {
if (distribution == "tweedie") {
data <- TweedieData(N, mu = 10000, phi = 100, power = 1.9)
} else if (distribution == "normal") {
data <- NormalData(N, mu = 10000, sigma = 1000)
} else {
stop("Invalid distribution specified.")
}
p_value <- tTest(data, mu = 10000)
if(p_value < alpha) {
num_successful_tests <- num_successful_tests + 1
}
}
perc_successful_tests <- num_successful_tests / M
return(perc_successful_tests)
}
# Create a df for plotting
df <- data.frame(
N = rep(c(10, 100, 1000, 5000), each = 2),
distribution = rep(c("tweedie", "normal"), times = 4),
share_reject = NA
)
# Fill in the share of rejects with the Tweedie vs Normal func
for (i in 1:nrow(df)) {
N <- df$N[i]
distribution <- df$distribution[i]
share_reject <- TweedieVsNormalTest(M = 100, N = N, alpha =0.05,
distribution = distribution)
df$share_reject[i] <- share_reject
}
# Plot the results
ggplot(df, aes(x = N, y = share_reject, color = distribution)) +
geom_line() +
geom_point() +
labs(
x = "Sample Size (N)",
y = "Percantage of Rejected Tests",
title = "Comparison of t-test Performance (Tweedie vs. Normal)"
) +
scale_color_manual(values = c("tweedie" = "blue", normal = "red"))
library(tidyverse)
# Creating a function to simulate the sample mean with N, mu and sigman
simulate_sample_mean <- function(N, mu = 0, sigma = 1) {
# Creating sample data by simulating a normal distribution from the given mean and sd
sample_data <- rnorm(N, mean = mu, sd = sigma)
# Returning the mean of the sample data by adding mean()
return(mean(sample_data))
}
# Creating a function to simulate the sample mean with N, mu and sigman
simulate_sample_mean <- function(N, mu = 0, sigma = 1) {
# Creating sample data by simulating a normal distribution from the given mean and sd
sample_data <- rnorm(N, mean = mu, sd = sigma)
# Returning the mean of the sample data by adding mean()
return(mean(sample_data))
}
# Examples to see how the precision of the sample mean gets better with more observations
simulate_sample_mean(10)
simulate_sample_mean(100)
simulate_sample_mean(1000)
# Defining variable M
M <- 20
# Creating a vector with M length and NA elements
sample_mean <- rep(NA, M)
# For loop for to create x sample means from the simulated sample mean
for(i in 1:M) {
sample_mean[i] <- simulate_sample_mean(10)
}
sample_mean
# Calculating the standard deviation of the sample mean
sd_sample_mean <- sd(sample_mean)
sd_sample_mean
# Theoretical value
theoretical_value <- 1/sqrt(10)
theoretical_value
# Creating the data frame with N, st_dev and sigma
# I also included the Theoretical column straight into the tibble
sample_variance <- tibble(N = seq(10, 200, by = 10),
st_dev = NA,
sigma = 1,
theoretical = sigma/sqrt(N))
head(sample_variance)
M <- 100
rows <- nrow(sample_variance)
for(i in 1:rows) {
# Generating the M sample means for the different N values
current_N <- sample_variance$N[i]
sample_means <- replicate(M, simulate_sample_mean(current_N))
# Generating the sd of the M sample means
sample_variance$st_dev[i] <- sd(sample_means)
}
head(sample_variance)
# Creating a graph with two lines
# One improvement would be to add labels to the two lines
graph <- sample_variance %>%
ggplot(aes(x = N)) +
geom_line(aes(y = st_dev),color = "red", size = 1.5) +
geom_line(aes(y = theoretical), color = "black", size = 1) +
labs(
title = "Observed vs Theoretical Standard Deviation",
x = "N",
y = "Standard Deviation"
) +
theme_classic()
graph
library(tweedie)
# N = 10
rtweedie(n = 10, mu = 10000, phi = 1000, power = 1.9)
# N = 100 000
x <- rtweedie(n = 100000, mu = 10000, phi = 1000, power = 1.9)
mean(x)
# t-test
N <- 10000
true_mu <- 10000
sample <- rtweedie(N, mu = true_mu, phi = 1000, power = 1.9)
t.test(sample, mu = true_mu)
# This function simulates tweedie distributed data with the sample size N,
# and performs a t-test against a mean of 10 000
# It returns the p-value from the t-test.
simTweedieTest <- function(N) {
# Simulating the data
sample_data <- rtweedie(N, mu = 10000, phi = 100, power = 1.9)
# Running the t-test on the simulated data
result <- t.test(sample_data, mu = 10000)
# Returning the p-value
return(result$p.value)
}
# P-value for N = 10 000
simTweedieTest(10000)
# This function runs the tweedie data simulation and t-test M times for
# a sample size of N. It returns the percentage of tests where the p-value
# was less than the alpha
MTweedieTests <- function(M, N, alpha) {
# Empty vector for p-values
p_values <- numeric(M)
# For loop running the simT function M number of times
for (i in 1:M) {
p_values[i] <- simTweedieTest(N)
}
# Identifying the percentage of times the p-value is less than alpha
percentage <- mean(p_values < alpha)
return(percentage)
}
MTweedieTests(10, 100, 0.05)
# Simplified version of the same task by using replicate
MTweedieTests <- function(M, N, alpha) {
# Running the function simT M number of times
p_values <- replicate(M, simTweedieTest(N))
# Identifying the percentage of times the p-value is less than alpha
percentage <- mean(p_values < alpha)
return(percentage)
}
MTweedieTests(10, 100, 0.05)
# Creating the data frame for tweedie data
df_tweedie <- tibble(N = c(10, 100, 1000, 5000),
M = 100,
share_reject = NA)
df_tweedie
# Setting the alpha
alpha <- 0.05
# Creating the for loop with df$ references
for(i in 1:nrow(df_tweedie)) {
df_tweedie$share_reject[i] <- MTweedieTests(df_tweedie$N[i],
df_tweedie$M[i], alpha)
}
df_tweedie
# Creating a figure to comment on the validity of the t-test and sample size
ggplot(data = df_tweedie, aes(x = N, y = share_reject)) +
geom_line(color = "blue") +
geom_point(color = "red") +
labs(
x = "N",
y = "Share Rejects",
title = "T-test Validity"
) +
theme_classic()
# Creating the same function as above, but for normal d data
simNormalTest <- function(N) {
# Simulating the data
sample_normal_data <- rnorm(N, mean = 10000, sd = 1)
# Running the t-test on the simulated data
result_normal <- t.test(sample_normal_data, mu = 10000)
return(result_normal$p.value)
}
# P-value for N = 10 000
simNormalTest(10000)
# Creating the same function as above, but for normal d data
MNormalTests <- function(M, N, alpha) {
# Running the function simT M number of times
p_values <- replicate(M, simNormalTest(N))
# Identifying the percentage of times the p-value is less than alpha
percentage <- mean(p_values < alpha)
return(percentage)
}
MNormalTests(10, 100, 0.05)
# Creating a new data frame with one column for each share reject
df_tweedie_normal <- tibble(N = c(10, 100, 1000, 5000),
M = 100,
share_reject_tweedie = NA,
share_reject_normal = NA)
df_tweedie_normal
alpha <- 0.05
# Creating the for loop with df_tweedie_normal$ references
for(i in 1:nrow(df_tweedie_normal)) {
df_tweedie_normal$share_reject_tweedie[i] <- MTweedieTests(df_tweedie_normal$N[i],
df_tweedie_normal$M[i], alpha)
df_tweedie_normal$share_reject_normal[i] <- MNormalTests(df_tweedie_normal$N[i],
df_tweedie_normal$M[i], alpha)
}
df_tweedie_normal
# Creating the plot with tweedie in blue and normal in red
ggplot(data = df_tweedie_normal, aes(x = N)) +
geom_line(aes(y = share_reject_tweedie), color = "blue", size = 1) +
geom_line(aes(y = share_reject_normal), color = "red", size = 1) +
geom_point(aes(y = share_reject_tweedie), color = "blue", size = 3) +
geom_point(aes(y = share_reject_normal), color = "red", size = 3) +
labs(
x = "N",
y = "Share Rejects",
title = "T-test Validity"
) +
theme_classic()
head(galaxies)
library(tidyverse)
raw_file <- readLines(con = "https://www.sao.ru/lv/lvgdb/article/suites_dw_Table1.txt")
substr(x = raw_file, start = 1, stop = 3)
L <- (substr(x = raw_file, start = 1, stop = 2) == "--") %>%
which() %>%
min(
)
cat(raw_file[1:(L-2)], sep = "\n", file = "variable_descriptions.txt")
variable_names <-
str_split(string = raw_file[(L-1)], pattern = "\\|") %>%
unlist() %>%
str_trim
comma_sepererated_values <-
raw_file[(L+1):810] %>%
gsub("\\|", ",", .) %>%
gsub(" ", "", .)
comma_sepererated_values_names <-
c(paste(variable_names, collapse = ","),
comma_sepererated_values)
# Make it a csv-file
cat(comma_sepererated_values_names, sep = "\n", file = "clean_data.csv")
# Read the finished .csv back into R in the normal way.
galaxies <- read.csv("clean_data.csv")
galaxies %>%
head(galaxies)
galaxies %>%
group_by(a_26)
galaxies %>%
sort(a_26)
galaxies %>%
sort(by = a_26)
summary(galaxies)
galaxies %>%
summary(count = n(a_26))
galaxies %>%
count(a_26)
galaxies %>%
ggplot(aes(x = a_26, y = count)) +
geom_histogram()
galaxies %>%
ggplot(aes(x = a_26, y = count(n))) +
geom_histogram()
galaxies %>%
ggplot(aes(x = a_26)) +
geom_histogram()
?geom_histogram
galaxies %>%
ggplot(aes(x = a_26)) +
geom_histogram(bins = 100)
galaxies %>%
ggplot(aes(x = a_26)) +
geom_histogram(binwidth = 100)
galaxies %>%
ggplot(aes(x = a_26)) +
geom_histogram(binwidth = 1)
galaxies %>%
ggplot(aes(x = a_26)) +
geom_histogram(binwidth = 0.1)
galaxies %>%
ggplot(aes(x = a_26)) +
geom_histogram(binwidth = 0.5)
galaxies %>%
ggplot(aes(x = a_26)) +
geom_histogram(binwidth = 0.5, color = "white")
galaxies %>%
ggplot(aes(x = a_26)) +
geom_histogram(binwidth = 1, color = "white")
galaxies %>%
ggplot(aes(x = a_26)) +
geom_histogram(bins = 30, color = "white")
galaxies %>%
ggplot(aes(x = a_26)) +
geom_histogram(bins = 100, color = "white")
galaxies %>%
ggplot(aes(x = a_26)) +
geom_histogram(bins = 70, color = "white")
galaxies %>%
ggplot(aes(x = a_26)) +
geom_histogram(bins = 70, color = "white") +
theme_classic()
galaxies %>%
ggplot(aes(x = a_26)) +
geom_histogram(bins = 70, color = "white") +
theme_bw()
raw_file4 <- readLines(UCNG_Table4.txt)
raw_file4 <- read.table(UCNG_Table4.txt)
raw_file4 <- read.table(file = "UCNG_Table4.txt")
setwd("~/Documents/H23/BAN400/git/git-MartinAkselsen")
raw_file4 <- read.table(file = "UCNG_Table4.txt")
raw_file4 <- read.table(file = "UCNG_Table4.txt")
raw_file4 <- readLines(con = "https://www.sao.ru/lv/lvgdb/article/UCNG_Table4.txt")
raw_file4
substr(x = raw_file, start = 1, stop = 3)
library(tidyverse)
substr(x = raw_file4, start = 1, stop = 3)
J <- (substr(x = raw_file4, start = 1, stop = 3) == "--") %>%
which() %>%
min
J
J <- (substr(x = raw_file4, start = 1, stop = 3) == "--") %>%
which() %>%
min()
J
J <- (substr(x = raw_file4, start = 1, stop = 3) == "---") %>%
which() %>%
min()
J
csv_task4 <-
raw_file4[(J+1):764] %>%
gsub("\\|", "," .) %>%
csv_task4 <-
raw_file4[(J+1):764] %>%
gsub("\\|", ",", .) %>%
gsub(" ", "", .)
cat(csv_task4, sep = "\n", file = "task_clean.csv")
cat(csv_task4, sep = "\n", file = "task4_clean.csv")
UCNG <- read_csv("task4_clean.csv")
UCNG
# Save the variable names
variable_names_task4 <-
str_split(string = raw_file4[(J-1)], pattern = "\\|") %>%
unlist() %>%
str_trim
csv_task4 <-
raw_file4[(J+1):764] %>%
gsub("\\|", ",", .) %>%
gsub(" ", "", .)
csv_task4_names <-
c(paste(variable_names_task4, collapse = ","),
csv_task4)
csv_task4_names
cat(csv_task4_names, sep = "\n", file = "task4_clean.csv")
UCNG <- read_csv("task4_clean.csv")
UCNG
galaxies
combined_df <- left_join(galaxies, UCNG, by = "name")
combined_df
View(combined_df)
View(combined_df)
combined_df
combined_df %>%
ggplot(aes(x = cz, y = D)) +
geom_point()
combined_df %>%
ggplot(aes(x = cz, y = D)) +
geom_point() +
ylab("Distance from us")
combined_df %>%
ggplot(aes(x = cz, y = D)) +
geom_point() +
ylab("Distance from us") +
xlab("Velocity")
combined_df %>%
ggplot(aes(x = cz, y = D)) +
geom_point() +
ylab("Distance from us") +
xlab("Velocity") +
theme_bw()
combined_df %>%
ggplot(aes(x = cz, y = D)) +
geom_point() +
geom_smooth() +
ylab("Distance from us") +
xlab("Velocity") +
theme_bw()
combined_df %>%
ggplot(aes(x = cz, y = D)) +
geom_point() +
geom_smooth() +
geom_text(aes(label = ifelse(names == "Andromeda", name, "")), vjust = -1) +
ylab("Distance from us") +
xlab("Velocity") +
theme_bw()
combined_df %>%
ggplot(aes(x = cz, y = D)) +
geom_point() +
geom_smooth() +
geom_text(aes(label = ifelse(name == "Andromeda", name, "")), vjust = -1) +
ylab("Distance from us") +
xlab("Velocity") +
theme_bw()
View(galaxies)
View(galaxies)
View(UCNG)
View(UCNG)
combined_df %>%
ggplot(aes(x = cz, y = D)) +
geom_point() +
geom_smooth() +
ylab("Distance from us") +
xlab("Velocity") +
theme_bw()
galaxies %>%
ggplot(aes(x = a_26)) +
geom_histogram(bins = 70, color = "white") +
theme_bw()
galaxies %>%
ggplot(aes(x = a_26)) +
geom_histogram(bins = 70, color = "white") +
xlab("Linear diameter of galaxy") +
theme_bw()
galaxies %>%
ggplot(aes(x = a_26)) +
geom_histogram(bins = 70, color = "white") +
xlab("Linear diameter of galaxy") +
ylab("Count") +
theme_bw()
galaxies %>%
ggplot(aes(x = a_26)) +
geom_histogram(bins = 70, fill = "blue", color = "white") +
xlab("Linear diameter of galaxy") +
ylab("Count") +
theme_bw()
library(dplyr)
# Read the data
flights <- library(nycflights13)
flights
# Read the data
library(nycflights13)
flights
# Read the data
library(nycflights13)
nycflights13::flights
flights <- nycflights13::flights
# All flights that had an arrival delay of over 2 hours
filter(flights, arr_delay >= 2)
?filter
library(dplyr)
# All flights that had an arrival delay of over 2 hours
filter(flights, arr_delay >= 2)
?filter
# All flights that had an arrival delay of over 2 hours
filter(flights, arr_delay == 2)
# All flights that had an arrival delay of over 2 hours
filter(flights, arr_delay >= 2)
# All flights that had an arrival delay of over 2 hours
filter(flights, arr_delay > 2)
# All flights that flew to Houson (IAH or HOU)
filter(flights, dest == c("IAH", "HOU"))
View(flights)
View(flights)
# Were operated by United, American or Delta
filter(flights, carrier == c("UA", "AA", "DL"))
# Were operated by United, American or Delta
filter(flights, carrier %in% c("UA", "AA", "DL"))
# All flights that flew to Houson (IAH or HOU)
filter(flights, dest %in% c("IAH", "HOU"))
# Departed in summer
filter(flights, month %in% c("7", "8", "9"))
# Arrived more than 2 hours late, but didnt leave late
filter(flights, arr_delay >= 2, dep_delay <= 0)
